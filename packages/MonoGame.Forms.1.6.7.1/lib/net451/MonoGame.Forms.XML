<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoGame.Forms</name>
    </assembly>
    <members>
        <member name="T:MonoGame.Forms.Components.Camera2D">
            <summary>
            A basic Camera2D component to move the view of an editor.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Components.Camera2D.Transform">
            <summary>
            The transformation matrix of the camera.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Components.Camera2D.#ctor">
            <summary>
            The basic constructor.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Components.Camera2D.GetZoom">
            <summary>
            Gets or Sets the Zoom value of the camera.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Components.Camera2D.GetRotation">
            <summary>
            Gets or Sets the Rotation value of the camera.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Components.Camera2D.Move(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Auxiliary method to move the camera
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Components.Camera2D.GetPosition">
            <summary>
            Gets or Sets the Position value of the camera.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Components.Camera2D.GetAbsolutPosition">
            <summary>
            Gets or Sets the absolute Position value of the camera.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Components.Camera2D.GetTransformation(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Get the Transformation.
            </summary>
            <param name="graphicsDevice">The GraphicsDevice.</param>
            <returns></returns>
        </member>
        <member name="T:MonoGame.Forms.Controls.DrawWindow">
            <summary>
            Inherit from this class in your custom class to create a draw control, which is selectable from the ToolBox during design time.
            It provides 'NO' game loop, but it's updated through invalidation (<see cref="M:System.Windows.Forms.Control.Invalidate"/>).
            <remarks>This draw control is useful as a simple window, which doesn't need a classical game loop like a preview window for textures.</remarks>
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Controls.DrawWindow.Editor">
            <summary>
            The <see cref="T:MonoGame.Forms.Services.DrawService"/> of the <see cref="T:MonoGame.Forms.Controls.DrawWindow"/> draws the actual content of the draw control.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.DrawWindow.Initialize">
            <summary>
            Basic initializing.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.DrawWindow.Draw">
            <summary>
            Basic drawing.
            The draw control becomes updated though invalidation: <see cref="M:System.Windows.Forms.Control.Invalidate"/>
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.DrawWindow.OnClientSizeChanged(System.EventArgs)">
            <summary>
            Updates related Editor services when the <see cref="P:System.Windows.Forms.Control.ClientSize"/> changes.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.DrawWindow.OnVisibleChanged(System.EventArgs)">
            <summary>
            In case the ClientSize was changed before activating the window, the cam position gets updated according to this changes.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.DrawWindow.Dispose(System.Boolean)">
            <summary>
            Disposes the contents of the attached Editor.
            </summary>
        </member>
        <member name="T:MonoGame.Forms.Controls.GameControl">
            <summary>
            This class mainly creates the <see cref="P:MonoGame.Forms.Controls.GraphicsDeviceControl.GraphicsDevice"/>, the <see cref="P:MonoGame.Forms.Controls.GraphicsDeviceControl.SwapChainRenderTarget"/> and the game loop.
            It inherits from <see cref="T:MonoGame.Forms.Controls.GraphicsDeviceControl"/>, which makes its childs available as a tool box control.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.GameControl.Initialize">
            <summary>
            Basic initializing of the game control.
            It starts a <see cref="T:System.Diagnostics.Stopwatch"/> and creates the mouse events.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.GameControl.Draw">
            <summary>
            Basic drawing logic.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.GameControl.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Basic update logic.
            You must implement this to your custom class, so you can write your own update logic for the game loop.
            </summary>
            <param name="gameTime">The <see cref="T:Microsoft.Xna.Framework.GameTime"/> reflects the current time of the game loop</param>
        </member>
        <member name="T:MonoGame.Forms.Controls.GraphicsDeviceControl">
            <summary>
            This class mainly creates the <see cref="P:MonoGame.Forms.Controls.GraphicsDeviceControl.GraphicsDevice"/> and the <see cref="P:MonoGame.Forms.Controls.GraphicsDeviceControl.SwapChainRenderTarget"/>.
            It inherits from <see cref="T:System.Windows.Forms.Control"/>, which makes its childs available as a tool box control.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Controls.GraphicsDeviceControl.GraphicsProfile">
            <summary>
            Set the <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsProfile"/> in the property grid during Design-Time (HiDef or Reach).
            You shouldn't change this during Run-Time!
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Controls.GraphicsDeviceControl.SwapChainRenderTarget">
            <summary>
            A swap chain used for rendering to a secondary GameWindow.
            Note: When working with different <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>, 
            you need to set the current render target back to the <see cref="P:MonoGame.Forms.Controls.GraphicsDeviceControl.SwapChainRenderTarget"/> as this is the real 'Back Buffer'. 
            'GraphicsDevice.SetRenderTarget(null)' will NOT work as you are doing usally in MonoGame. Instead use 'GraphicsDevice.SetRenderTarget(SwapChainRenderTarget)'.
            Otherwise you will see only a black control window.
            <remarks>This is an extension and not part of stock XNA. It is currently implemented for Windows and DirectX only.</remarks>
            </summary>
        </member>
        <member name="E:MonoGame.Forms.Controls.GraphicsDeviceControl.SwapChainRenderTargetRefreshed">
            <summary>
            Mainly transfers the new <see cref="P:MonoGame.Forms.Controls.GraphicsDeviceControl.SwapChainRenderTarget"/> to the editor service objects after resizing a custom control.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.GraphicsDeviceControl.GetClampedMultisampleCount(System.Int32)">
            <summary>
            Get the MultiSampleCount (MSAA Antialising) to the nearest power of two in relation of what the users <see cref="P:MonoGame.Forms.Controls.GraphicsDeviceControl.GraphicsDevice"/> can handle.
            </summary>
            <param name="multiSampleCount">The desired multisample count (MSAA)</param>
            <returns>The power of two of the MultiSampleCount</returns>
        </member>
        <member name="M:MonoGame.Forms.Controls.GraphicsDeviceControl.SetMultiSampleCount(System.Int32)">
            <summary>
            Set the "MultiSampleCount" for Multi Sampled AntiAlising (MSAA).
            The input value will be automatically clamped to the nearest power of two in relation of what the users <see cref="P:MonoGame.Forms.Controls.GraphicsDeviceControl.GraphicsDevice"/> can handle.
            </summary>
            <param name="multiSampleCount">Usual numbers are 0, 2, 4, 8.</param>
        </member>
        <member name="E:MonoGame.Forms.Controls.GraphicsDeviceControl.MultiSampleCountRefreshed">
            <summary>
            Subscribe to this event to react to MultiSampleCount changes in your custom controls.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Controls.GraphicsDeviceControl.GraphicsDevice">
            <summary>
            Get the GraphicsDevice.
            </summary>
        </member>
        <member name="F:MonoGame.Forms.Controls.GraphicsDeviceControl._graphicsDeviceService">
            <summary>
            Get the GraphicsDeviceService.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Controls.GraphicsDeviceControl.Services">
            <summary>
            Get the ServiceContainer.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Controls.GraphicsDeviceControl.AutomaticInvalidation">
            <summary>
            "true" if you want the editor view automatically updates itself.
            Set this to "false" to update the editor view manually by calling "Invalidate()" on a custom control.
            <remarks>
            This option is useful when you are using a MonoGame.Forms render control inside a NodeGraphEditor for example and you don't want to block the
            whole NodeGraph with the invalidations taking place here.
            </remarks>
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Controls.GraphicsDeviceControl.AlwaysEnableKeyboardInput">
            <summary>
            If enabled the Keyboard input will work even if the current control has no focus (mouse cursor is outside of the control).
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Controls.GraphicsDeviceControl.IsMouseInsideControl">
            <summary>
            Returns true when the mouse cursor is inside the control.
            </summary>
        </member>
        <member name="T:MonoGame.Forms.Controls.UpdateWindow">
            <summary>
            Inherit from this class in your custom class to create a draw control with a game loop, which is selectable from the ToolBox during design time.
            It provides a game loop and a place to draw.
            <remarks>This game loop control is useful as a window, which needs a classical game loop for complex <see cref="T:Microsoft.Xna.Framework.GameTime"/> based mechanics.</remarks>
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Controls.UpdateWindow.Editor">
            <summary>
            The <see cref="T:MonoGame.Forms.Services.UpdateService"/> of the <see cref="T:MonoGame.Forms.Controls.UpdateWindow"/> draws and updates the actual content of the update control.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.UpdateWindow.Initialize">
            <summary>
            Basic initializing.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.UpdateWindow.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Basic updating.
            It uses a real game loop, represented by <see cref="T:Microsoft.Xna.Framework.GameTime"/>.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.UpdateWindow.Draw">
            <summary>
            Basic drawing.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.UpdateWindow.OnClientSizeChanged(System.EventArgs)">
            <summary>
            Updates related Editor services when the <see cref="P:System.Windows.Forms.Control.ClientSize"/> changes.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.UpdateWindow.OnVisibleChanged(System.EventArgs)">
            <summary>
            In case the ClientSize was changed before activating the window, the cam position gets updated according to this changes.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Controls.UpdateWindow.Dispose(System.Boolean)">
            <summary>
            Disposes the contents of the attached Editor.
            </summary>
        </member>
        <member name="T:MonoGame.Forms.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Properties.Resources.Font">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="T:MonoGame.Forms.Services.DrawService">
            <summary>
            This class inherits from <see cref="T:MonoGame.Forms.Services.GFXService"/>, which provides basic functionality of MonoGame.
            The <see cref="T:MonoGame.Forms.Controls.DrawWindow"/> inherits from this class.
            <remarks>Note: this class provides no game loop. Only the <see cref="T:MonoGame.Forms.Services.UpdateService"/> deliveres one.</remarks>
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.DrawService.Initialize">
            <summary>
            Override this basic intitializing method in your custom class to create your own initializing logic.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.DrawService.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Throws a <see cref="T:System.NotImplementedException"/>, because a <see cref="T:MonoGame.Forms.Services.DrawService"/> class doesn't contain a game loop.
            This is a basic implementation of the corresponding abstract method from the <see cref="T:MonoGame.Forms.Services.GFXService"/> class.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.DrawService.Draw">
            <summary>
            Override this basic drawing method in your custom class to create your own drawing logic.
            This basic implementation just clears the background color of the draw control in the predefined color: <see cref="P:MonoGame.Forms.Services.GFXService.BackgroundColor"/>
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.DrawService.Dispose">
            <summary>
            Disposes the contents of this draw service.
            </summary>
        </member>
        <member name="T:MonoGame.Forms.Services.GFXService">
            <summary>
            The <see cref="T:MonoGame.Forms.Services.GFXService"/> class provides basic functionality of MonoGame
            </summary>
        </member>
        <member name="T:MonoGame.Forms.Services.GFXService.RenderTargetManager">
            <summary>
            This manager will manage all of your custom <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>'s automatically - based on the current ClientSize and MultiSampleCount. 
            </summary>
        </member>
        <member name="T:MonoGame.Forms.Services.GFXService.RenderTargetManager.RenderTarget2DHelper">
            <summary>
            This helper class helps to hold additional <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> data.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.RenderTargetManager.RenderTarget2DHelper.GetRenderTarget2D">
            <summary>
            Get the actual <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.RenderTargetManager.CreateNewRenderTarget2D(System.String,System.Boolean)">
            <summary>
            Use this function to create a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>, which is fully managed internally.
            </summary>
            <param name="key">Set a key (name) for the new <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</param>
            <param name="useMultiSampling"><c>true</c> if you want to use multi sampling on this <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</param>
            <returns>The freshly created <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</returns>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.RenderTargetManager.GetRenderTarget2D(System.String)">
            <summary>
            Get a <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> out of the Manager's list.
            </summary>
            <param name="key">Your previously set key (name) for the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> you want to get.</param>
            <returns>Your desired <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> or <c>null</c> if the key is not availablbe.</returns>
        </member>
        <member name="T:MonoGame.Forms.Services.GFXService.DisplayStyle">
            <summary>
            DisplayStyle enumerations for the integrated display.
            </summary>
        </member>
        <member name="F:MonoGame.Forms.Services.GFXService.DisplayStyle.TopLeft">
            <summary>
            Draws the integrated display in the top left corner of the custom control.
            </summary>
        </member>
        <member name="F:MonoGame.Forms.Services.GFXService.DisplayStyle.TopRight">
            <summary>
            Draws the integrated display in the top right corner of the custom control.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.SetDisplayStyle">
            <summary>
            Directly sets the <see cref="T:MonoGame.Forms.Services.GFXService.DisplayStyle"/> of the integrated display.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.GetRenderTargetManager">
            <summary>
            Get the internal <see cref="T:MonoGame.Forms.Services.GFXService.RenderTargetManager"/>.
            <remarks>
            When working with custom <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>'s, it's strongly recomended to create these render targets with this RenderTargetManager,
            because they will updated automatically when the client size or the multi sample count changes.
            </remarks>
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.DisableRenderTargets">
            <summary>
            Disable all custom <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>'s hold by the <see cref="T:MonoGame.Forms.Services.GFXService.RenderTargetManager"/>, before they becoming reactivated after 500 milliseconds.
            </summary>
        </member>
        <member name="E:MonoGame.Forms.Services.GFXService.RenderTargetsRefreshed">
            <summary>
            Subscribe to this event in your custom control to get notified when <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>'s, 
            hold by the <see cref="T:MonoGame.Forms.Services.GFXService.RenderTargetManager"/>, got refreshed.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.GetCurrentMultiSampleCount">
            <summary>
            Get the current active MultiSampleCount.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.Content">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.Content.ContentManager"/> is for loading custom content from the content root.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.graphics">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.Graphics.GraphicsDevice"/>.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.services">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.GameServiceContainer"/>.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.spriteBatch">
            <summary>
            The <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.SwapChainRenderTarget">
            <summary>
            A swap chain used for rendering to a secondary GameWindow.
            Note: When working with different <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>, 
            you need to set the current render target back to the <see cref="P:MonoGame.Forms.Services.GFXService.SwapChainRenderTarget"/> as this is the real 'Back Buffer'. 
            'GraphicsDevice.SetRenderTarget(null)' will NOT work as you are doing usally in MonoGame. Instead use 'GraphicsDevice.SetRenderTarget(SwapChainRenderTarget)'.
            Otherwise you will see only a black control window.
            <remarks>This is an extension and not part of stock XNA. It is currently implemented for Windows and DirectX only.</remarks>
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.GetRelativeMousePosition">
            <summary>
            Get the current mouse position in the control.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.GetAbsoluteMousePosition">
            <summary>
            Get the current mouse position.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.Cam">
            <summary>
            The Camera2D component.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.BackgroundColor">
            <summary>
            The color used to clear the screen / control with <see cref="M:Microsoft.Xna.Framework.Graphics.GraphicsDevice.Clear(Microsoft.Xna.Framework.Color)"/>
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.Font">
            <summary>
            A built-in font, which is used by the integrated display. You can also use it as debugging font for example.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.Format">
            <summary>
            This formats the fps style.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.ElapsedTime">
            <summary>
            The elapsed <see cref="T:Microsoft.Xna.Framework.GameTime"/>.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.FrameCounter">
            <summary>
            The frame counter used by the fps display.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.GetFrameRate">
            <summary>
            Get the current frames per second (FPS).
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.Pixel">
            <summary>
            A plain white pixel mainly to draw the background of the integrated display, but you can also use it in your custom control.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.DisplayBackColor">
            <summary>
            Set the back color of the integrated display.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.DisplayForeColor">
            <summary>
            Set the font color of the integrated display.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.FontHeight">
            <summary>
            Height of the display Font - Cached in InitializeGFX().
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.ShowFPS">
            <summary>
            Show or hide the 'FPS' (frames per second) of the corresponding control / window.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.ShowCursorPosition">
            <summary>
            Show or hide the 'cursor position' of the corresponding control / window.
            </summary>
        </member>
        <member name="P:MonoGame.Forms.Services.GFXService.ShowCamPosition">
            <summary>
            Show or hide the 'cam position' of the corresponding control / window.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.InitializeGFX(Microsoft.Xna.Framework.Graphics.IGraphicsDeviceService,Microsoft.Xna.Framework.Graphics.SwapChainRenderTarget)">
            <summary>
            Initializes the GFX system, which contains basic MonoGame functionality.
            </summary>
            <param name="graphics">The graphics device service</param>
            <param name="swapChainRenderTarget">The swap chain render target</param>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.UpdateFrameCounter">
            <summary>
            Updates the frame counter (FPS).
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.UpdateDisplay(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates the integrated display.
            </summary>
            <param name="gameTime">The <see cref="T:Microsoft.Xna.Framework.GameTime"/> from the game loop.</param>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.DrawDisplay">
            <summary>
            Draws the integrated display.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.BeginAntialising(System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})">
             <summary>
             Everything between <c>BeginAntialising()</c> and <c>EndAntialising()</c> will be affected by MSAA.
             </summary>
             <example>
             <code>
             protected override void Draw()
             {
                base.Draw();
                
                Editor.BeginAntialising();
            
                Editor.spriteBatch.Begin();
            
                //Your drawings
            
                Editor.spriteBatch.End();
            
                Editor.EndAntialising();
             }
             </code>
             </example>
             <param name="clearGraphics"><c>false</c> if you don't want to to call <see cref="P:MonoGame.Forms.Services.GFXService.graphics"/>.Clear() after setting the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</param>
             <param name="clearColor">The <see cref="T:Microsoft.Xna.Framework.Color"/> to be used to clear the <see cref="P:MonoGame.Forms.Services.GFXService.graphics"/> after setting the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</param>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.EndAntialising(System.Boolean,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Everything between <c>BeginAntialising()</c> and <c>EndAntialising()</c> will be affected by MSAA.
            </summary>
            <param name="drawToSpriteBatch"><c>true</c> to automatically draw the result to the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="clearGraphics"><c>false</c> if you don't want to to call <see cref="P:MonoGame.Forms.Services.GFXService.graphics"/>.Clear() after setting the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</param>
            <param name="clearColor">The <see cref="T:Microsoft.Xna.Framework.Color"/> to be used to clear the <see cref="P:MonoGame.Forms.Services.GFXService.graphics"/> after setting the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</param>
            <returns>The Antialising <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</returns>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.BeginRenderTarget(System.String,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})">
             <summary>
             Everything between <c>BeginRenderTarget()</c> and <c>EndRenderTarget()</c> will be drawn to the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.
             </summary>
             <example>
             <code>
             protected override void Draw()
             {
                base.Draw();
                
                Editor.BeginRenderTarget("MyRenderTarget");
            
                Editor.spriteBatch.Begin();
            
                //Your drawings
            
                Editor.spriteBatch.End();
            
                Editor.EndRenderTarget("MyRenderTarget", false);
             }
             </code>
             </example>
             <param name="key">Please enter a previously set key of the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> you want to begin with.</param>
             <param name="clearGraphics"><c>false</c> if you don't want to to call <see cref="P:MonoGame.Forms.Services.GFXService.graphics"/>.Clear() after setting the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</param>
             <param name="clearColor">The <see cref="T:Microsoft.Xna.Framework.Color"/> to be used to clear the <see cref="P:MonoGame.Forms.Services.GFXService.graphics"/> after setting the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</param>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.EndRenderTarget(System.String,System.Boolean,System.Boolean,System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Everything between <c>BeginRenderTarget()</c> and <c>EndRenderTarget()</c> will be drawn to the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.
            </summary>
            <param name="key">Please enter a previously set key of the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/> you want to end.</param>
            <param name="drawToSpriteBatch"><c>true</c> to automatically draw the result to the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.</param>
            <param name="clearGraphics"><c>false</c> if you don't want to to call <see cref="P:MonoGame.Forms.Services.GFXService.graphics"/>.Clear() after setting the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</param>
            <param name="clearColor">The <see cref="T:Microsoft.Xna.Framework.Color"/> to be used to clear the <see cref="P:MonoGame.Forms.Services.GFXService.graphics"/> after setting the <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</param>
            <returns>The resulting <see cref="T:Microsoft.Xna.Framework.Graphics.RenderTarget2D"/>.</returns>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.BeginCamera2D(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Use 'BeginCamera2D' as a replacement of <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>.Begin(<see cref="T:Microsoft.Xna.Framework.Graphics.SpriteSortMode"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.BlendState"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.SamplerState"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.DepthStencilState"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.RasterizerState"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.Effect"/>, <see cref="T:Microsoft.Xna.Framework.Matrix"/>?).
            <remarks>Automatically uses the <see cref="T:Microsoft.Xna.Framework.Matrix"/> of the Camera2D component!</remarks>
            </summary>
            <param name="sortMode">Defines sprite sort rendering options.</param>
            <param name="blendState">The blend state.</param>
            <param name="samplerState">The sampler state.</param>
            <param name="depthStencilState">The depth stencil state.</param>
            <param name="rasterizerState">The rasterizer state.</param>
            <param name="effect">The effect.</param>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.EndCamera2D">
            <summary>
            Use this to end the <see cref="T:Microsoft.Xna.Framework.Graphics.SpriteBatch"/>, previously opened by <see cref="M:MonoGame.Forms.Services.GFXService.BeginCamera2D(Microsoft.Xna.Framework.Graphics.SpriteSortMode,Microsoft.Xna.Framework.Graphics.BlendState,Microsoft.Xna.Framework.Graphics.SamplerState,Microsoft.Xna.Framework.Graphics.DepthStencilState,Microsoft.Xna.Framework.Graphics.RasterizerState,Microsoft.Xna.Framework.Graphics.Effect)"/>.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.MoveCam(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Move the camera by the value defined in the parameter amount.
            </summary>
            <param name="amount">How much should the camera move?</param>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.ResetCam">
            <summary>
            Resets all the values from the camera component to their defaults.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.Initialize">
            <summary>
            Basic initializing service.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Basic updating service.
            </summary>
            <param name="gameTime">The <see cref="T:Microsoft.Xna.Framework.GameTime"/> from the game loop.</param>
        </member>
        <member name="M:MonoGame.Forms.Services.GFXService.Draw">
            <summary>
            Basic drawing service.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.ServiceContainer.GetService(System.Type)">
            <summary>
                Looks up the specified service.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.ServiceContainer.AddService``1(``0)">
            <summary>
                Adds a new service to the collection.
            </summary>
        </member>
        <member name="T:MonoGame.Forms.Services.UpdateService">
            <summary>
            This class inherits from <see cref="T:MonoGame.Forms.Services.GFXService"/>, which provides basic functionality of MonoGame.
            The <see cref="T:MonoGame.Forms.Controls.UpdateWindow"/> inherits from this class.
            <remarks>Note: this class provides a game loop. The <see cref="T:MonoGame.Forms.Services.DrawService"/> is not using a game loop.</remarks>
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.UpdateService.Initialize">
            <summary>
            Override this basic intitializing method in your custom class to create your own initializing logic.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.UpdateService.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Override this basic updating method in your custom class to create your own initializing logic.
            </summary>
            <param name="gameTime">The <see cref="T:Microsoft.Xna.Framework.GameTime"/> of the game loop.</param>
        </member>
        <member name="M:MonoGame.Forms.Services.UpdateService.Draw">
            <summary>
            Override this basic drawing method in your custom class to create your own drawing logic.
            This basic implementation just clears the background color of the draw control in the predefined color: <see cref="P:MonoGame.Forms.Services.GFXService.BackgroundColor"/>
            and updates the FrameCounter, which shows the current FPS of the window / control.
            </summary>
        </member>
        <member name="M:MonoGame.Forms.Services.UpdateService.Dispose">
            <summary>
            Disposes the contents of this update service.
            </summary>
        </member>
    </members>
</doc>
